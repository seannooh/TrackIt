{"ast":null,"code":"var _jsxFileName = \"/Users/seanoh/Desktop/trackit-app/frontend/src/components/Journal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Journal({\n  journal,\n  setJournal\n}) {\n  _s();\n  // State for food modal\n  const [selectedFood, setSelectedFood] = useState(null);\n  // Get today's date in the format yyyy-mm-dd\n  const today = new Date().toISOString().split(\"T\")[0];\n  // Set today's date as default\n  const [date, setDate] = useState(today);\n\n  // Hold journal entries for selected date\n  const [currentEntries, setCurrentEntries] = useState({\n    breakfast: [],\n    lunch: [],\n    dinner: [],\n    snacks: []\n  });\n  const userId = localStorage.getItem(\"userId\");\n  const fetchJournalEntries = useCallback(async selectedDate => {\n    try {\n      const userId = localStorage.getItem(\"userId\");\n      const url = `http://localhost:5001/journal?date=${selectedDate}&userId=${userId}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      if (response.ok) {\n        var _data$journal$selecte, _data$journal;\n        const journalData = (_data$journal$selecte = (_data$journal = data.journal) === null || _data$journal === void 0 ? void 0 : _data$journal[selectedDate]) !== null && _data$journal$selecte !== void 0 ? _data$journal$selecte : {\n          breakfast: [],\n          lunch: [],\n          dinner: [],\n          snacks: []\n        };\n        setJournal(data.journal || {});\n        setCurrentEntries(journalData);\n      } else {\n        console.error(\"Error fetching journal entries:\", data.error || \"Unknown error\");\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch journal entries:\", error);\n    }\n  }, [setJournal]);\n  useEffect(() => {\n    fetchJournalEntries(date);\n  }, [date, fetchJournalEntries]);\n\n  // Update current entries whenever the date changes\n  const handleDateChange = event => {\n    const newDate = event.target.value;\n    setDate(newDate);\n  };\n\n  // Calculate total calories for only breakfast, lunch, dinner, or snacks\n  const calculateTotalCalories = mealType => {\n    let total = 0;\n    for (let i = 0; i < currentEntries[mealType].length; i++) {\n      let food = currentEntries[mealType][i];\n      total += food.calories * food.quantity;\n    }\n    return total;\n  };\n\n  // Calculate the final total calories across all meals\n  const calculateFinalTotalCalories = () => {\n    return calculateTotalCalories(\"breakfast\") + calculateTotalCalories(\"lunch\") + calculateTotalCalories(\"dinner\") + calculateTotalCalories(\"snacks\");\n  };\n\n  // Open the menu\n  const openMenu = food => {\n    setSelectedFood(food);\n  };\n\n  // Close the menu\n  const closeMenu = () => {\n    setSelectedFood(null);\n  };\n\n  // Handle quantity change\n  const handleQuantityChange = event => {\n    const newQuantity = parseInt(event.target.value) || 0;\n    setSelectedFood(prev => ({\n      ...prev,\n      quantity: newQuantity\n    }));\n  };\n  const saveUpdatedQuantity = async () => {\n    if (!selectedFood) return;\n    try {\n      const response = await fetch(`http://localhost:5001/update-journal`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId: userId,\n          date: date,\n          mealType: selectedFood.meal_type,\n          foodName: selectedFood.food_name,\n          newQuantity: selectedFood.quantity\n        })\n      });\n      if (response.ok) {\n        await fetchJournalEntries(date);\n        setSelectedFood(null);\n      } else {\n        console.error(\"Failed updating quantity\");\n      }\n    } catch (error) {\n      console.error(\"Error updating quantity: \", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"journal-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Journal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      value: date,\n      onChange: handleDateChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), selectedFood && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"menu-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedFood.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Serving Size: \", selectedFood.serving_size, \"g\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Calories: \", selectedFood.calories || 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Carbs: \", selectedFood.carbohydrates_total_g || 'N/A', \"g\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Protein: \", selectedFood.protein_g || 'N/A', \"g\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Fat: \", selectedFood.fat_total_g || 'N/A', \"g\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Quantity:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: selectedFood.quantity,\n            onChange: handleQuantityChange,\n            min: \"0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveUpdatedQuantity,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closeMenu,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this), [\"breakfast\", \"lunch\", \"dinner\", \"snacks\"].map(mealType => {\n      var _currentEntries$mealT;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: mealType.charAt(0).toUpperCase() + mealType.slice(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ((_currentEntries$mealT = currentEntries[mealType]) === null || _currentEntries$mealT === void 0 ? void 0 : _currentEntries$mealT.length) > 0 ? currentEntries[mealType].map((food, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => openMenu(food),\n            style: {\n              cursor: 'pointer'\n            },\n            children: [food.food_name, \" - \", food.quantity, \"x - \", food.calories * food.quantity, \" calories\"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 33\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"No items added to \", mealType, \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)]\n      }, mealType, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"total-calories-today\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Total Calories Today\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [calculateFinalTotalCalories(), \" calories\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n}\n_s(Journal, \"0U/BtmDh6SPS6NOV15kGhkxpJJA=\");\n_c = Journal;\nvar _c;\n$RefreshReg$(_c, \"Journal\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","Journal","journal","setJournal","_s","selectedFood","setSelectedFood","today","Date","toISOString","split","date","setDate","currentEntries","setCurrentEntries","breakfast","lunch","dinner","snacks","userId","localStorage","getItem","fetchJournalEntries","selectedDate","url","response","fetch","data","json","ok","_data$journal$selecte","_data$journal","journalData","console","error","handleDateChange","event","newDate","target","value","calculateTotalCalories","mealType","total","i","length","food","calories","quantity","calculateFinalTotalCalories","openMenu","closeMenu","handleQuantityChange","newQuantity","parseInt","prev","saveUpdatedQuantity","method","headers","body","JSON","stringify","meal_type","foodName","food_name","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","name","serving_size","carbohydrates_total_g","protein_g","fat_total_g","min","onClick","map","_currentEntries$mealT","charAt","toUpperCase","slice","index","style","cursor","_c","$RefreshReg$"],"sources":["/Users/seanoh/Desktop/trackit-app/frontend/src/components/Journal.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nexport default function Journal({ journal, setJournal }) {\n    // State for food modal\n    const [selectedFood, setSelectedFood] = useState(null);\n    // Get today's date in the format yyyy-mm-dd\n    const today = new Date().toISOString().split(\"T\")[0];\n    // Set today's date as default\n    const [date, setDate] = useState(today);\n\n    // Hold journal entries for selected date\n    const [currentEntries, setCurrentEntries] = useState({\n        breakfast: [],\n        lunch: [],\n        dinner: [],\n        snacks: []\n    });\n    const userId = localStorage.getItem(\"userId\");\n\n    const fetchJournalEntries = useCallback(async (selectedDate) => {\n        try {\n            const userId = localStorage.getItem(\"userId\");\n    \n            const url = `http://localhost:5001/journal?date=${selectedDate}&userId=${userId}`;\n            const response = await fetch(url);\n            const data = await response.json();\n    \n            if (response.ok) {\n                const journalData = data.journal?.[selectedDate] ?? { breakfast: [], lunch: [], dinner: [], snacks: [] };\n                setJournal(data.journal || {});\n                setCurrentEntries(journalData);\n            } \n            else {\n                console.error(\"Error fetching journal entries:\", data.error || \"Unknown error\");\n            }\n        } \n        catch (error) {\n            console.error(\"Failed to fetch journal entries:\", error);\n        }\n    }, [setJournal]);\n    \n    \n    useEffect(() => {\n        fetchJournalEntries(date);\n    }, [date, fetchJournalEntries]);\n    \n\n    // Update current entries whenever the date changes\n    const handleDateChange = (event) => {\n        const newDate = event.target.value;\n        setDate(newDate);\n    };\n\n    // Calculate total calories for only breakfast, lunch, dinner, or snacks\n    const calculateTotalCalories = (mealType) => {\n        let total = 0;\n        for (let i = 0; i < currentEntries[mealType].length; i++) {\n            let food = currentEntries[mealType][i]; \n            total += food.calories * food.quantity;\n        }\n        return total;\n    };\n\n    // Calculate the final total calories across all meals\n    const calculateFinalTotalCalories = () => {\n        return (\n            calculateTotalCalories(\"breakfast\") +\n            calculateTotalCalories(\"lunch\") +\n            calculateTotalCalories(\"dinner\") +\n            calculateTotalCalories(\"snacks\")\n        );\n    };\n\n    // Open the menu\n    const openMenu = (food) => {\n        setSelectedFood(food);\n    };\n\n    // Close the menu\n    const closeMenu = () => {\n        setSelectedFood(null);\n    };\n\n    // Handle quantity change\n    const handleQuantityChange = (event) => {\n        const newQuantity = parseInt(event.target.value) || 0;\n        setSelectedFood((prev) => ({\n            ...prev,\n            quantity: newQuantity,\n        }));\n    };\n\n    const saveUpdatedQuantity = async () => {\n        if (!selectedFood) return;\n\n        try {\n            const response = await fetch(`http://localhost:5001/update-journal`, {\n                method: \"PATCH\", \n                headers: { \"Content-Type\": \"application/json\"},\n                body: JSON.stringify({\n                   userId: userId, \n                   date: date,\n                   mealType: selectedFood.meal_type,\n                   foodName: selectedFood.food_name,\n                   newQuantity: selectedFood.quantity, \n                }),\n            });\n\n            if (response.ok) {\n                await fetchJournalEntries(date);\n                setSelectedFood(null);\n            }\n            else {\n                console.error(\"Failed updating quantity\")\n            }\n        }\n        catch (error) {\n            console.error(\"Error updating quantity: \", error);\n        }\n    };\n\n    return (\n        <div className=\"journal-page\">\n            <h1>Journal</h1>\n            \n            <input \n                type=\"date\" \n                value={date} \n                onChange={handleDateChange}\n            />\n\n            {selectedFood && (\n                <div className=\"menu\">\n                    <div className=\"menu-content\">\n                        <h2>{selectedFood.name}</h2>\n                        <p>Serving Size: {selectedFood.serving_size}g</p>\n                        <p>Calories: {selectedFood.calories || 'N/A'}</p>\n                        <p>Carbs: {selectedFood.carbohydrates_total_g || 'N/A'}g</p>\n                        <p>Protein: {selectedFood.protein_g || 'N/A'}g</p>\n                        <p>Fat: {selectedFood.fat_total_g || 'N/A'}g</p>\n                        <label>\n                            Quantity:\n                            <input\n                                type=\"number\"\n                                value={selectedFood.quantity}\n                                onChange={handleQuantityChange}\n                                min=\"0\"\n                            />\n                        </label>\n                        <button onClick={saveUpdatedQuantity}>\n                            Save\n                        </button>\n                        <button onClick={closeMenu}>\n                            Close\n                        </button>\n                    </div>\n                </div>\n            )}\n    \n            {[\"breakfast\", \"lunch\", \"dinner\", \"snacks\"].map((mealType) => (\n                <div key={mealType}>\n                    <h3>{mealType.charAt(0).toUpperCase() + mealType.slice(1)}</h3>\n                    <ul>\n                        {currentEntries[mealType]?.length > 0 ? (\n                            currentEntries[mealType].map((food, index) => (\n                                <li key={index} onClick={() => openMenu(food)} style={{ cursor: 'pointer' }}>\n                                    {food.food_name} - {food.quantity}x - {food.calories * food.quantity} calories\n                                </li>\n                            ))\n                        ) : (\n                            <p>No items added to {mealType}.</p>\n                        )}\n                    </ul>\n                </div>\n            ))}\n    \n            <div className=\"total-calories-today\">\n                <h2>Total Calories Today</h2>\n                <p>{calculateFinalTotalCalories()} calories</p>\n            </div>\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}